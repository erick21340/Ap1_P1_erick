@page "/edit"
@page "/edit/{ArticuloID:int}"

@inject NavigationManager NavigationManager
@inject ArticuloService ArticuloService
@rendermode InteractiveServer

<PageTitle>Editar Artículo</PageTitle>
<EditForm Model="articulo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">

        <div class="card-header bg-primary">
            <div class="row text-white text-center">
                <h3>Editar Artículo</h3>
            </div>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    <label class="fw-bold">ArtículoId:</label>
                    <InputNumber class="form-control" @bind-Value="articulo.ArticulosId"></InputNumber>
                    <ValidationMessage For="@(() => articulo.ArticulosId)" />
                </div>
                <div class="col-6">
                    <label class="fw-bold">Descripción:</label>
                    <InputText class="form-control" @bind-Value="articulo.Descripcion"></InputText>
                    <ValidationMessage For="@(() => articulo.Descripcion)" />
                </div>
            </div>

            <div class="row">
                <div class="col-6">
                    <label class="fw-bold">Costo:</label>
                    <InputNumber class="form-control" @bind-Value="articulo.Costo"></InputNumber>
                    <ValidationMessage For="@(() => articulo.Costo)" />
                </div>
                <div class="col-6">
                    <label class="fw-bold">Ganancia:</label>
                    <InputNumber class="form-control" @bind-Value="articulo.ganacia"></InputNumber>
                    <ValidationMessage For="@(() => articulo.ganacia)" />
                </div>
                <div class="col-6">
                    <label class="fw-bold">Precio:</label>
                    <InputNumber class="form-control" @bind-Value="articulo.precio"></InputNumber>
                    <ValidationMessage For="@(() => articulo.precio)" />
                </div>
            </div>
        </div>

        <div class="card-footer d-flex justify-content-end">
            <a href="index" class="btn btn-danger"><i class="fas fa-reply"></i> Retroceder</a>
            <button type="submit" class="btn btn-success"><i class="fas fa-save"></i> Guardar</button>
        </div>
    </div>
</EditForm>

<div class="exito-contenedor-invalido" style="@fracasoContenedorEstilo">
    <div id="fracaso-mensaje" class="mensaje-contenedor">@mensajeFracaso</div>
</div>
<div class="exito-contenedor-valido" style="@exitoContenedorEstilo">
    <div id="exito-mensaje" class="mensaje-contenedor">@mensajeExito</div>
</div>

@code {
    public Articulos articulo = new Articulos();

    private string mensajeExito = "";
    private string mensajeFracaso = "";
    private string exitoContenedorEstilo = "display: none;";
    private string fracasoContenedorEstilo = "display: none;";

    [Parameter]
    public int ArticuloID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ArticuloID > 0)
        {
            articulo = await ArticuloService.Buscar(ArticuloID);
        }
    }

    public async Task Guardar()
    {
        var guardar = await ArticuloService.Guardar(this.articulo);
        if (guardar)
        {
            await MostrarMensaje("Guardado exitoso.", "Valido");
            NavigationManager.NavigateTo("index");
        }
        else
        {
            await MostrarMensaje("Guardado Incorrecto.", "Invalido");
            NavigationManager.NavigateTo("index");
        }
    }

    public async Task MostrarMensaje(string mensaje, string tipoMensaje)
    {
        if (tipoMensaje == "Valido")
        {
            mensajeExito = mensaje;
            exitoContenedorEstilo = "display: block;";
            fracasoContenedorEstilo = "display: none;";

            await Task.Delay(4500);
            exitoContenedorEstilo = "display: none;";
            StateHasChanged();
        }
        else if (tipoMensaje == "Invalido")
        {
            mensajeFracaso = mensaje;
            fracasoContenedorEstilo = "display: block;";
            exitoContenedorEstilo = "display: none;";

            await Task.Delay(4500);
            fracasoContenedorEstilo = "display: none;";
            StateHasChanged();
        }
    }
}
